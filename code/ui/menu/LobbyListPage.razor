@using System
@using Sandbox;
@using System.Linq;
@using System.Threading.Tasks
@using Sandbox.Menu
@using Sandbox.MenuSystem;
@using Sandbox.UI;
@using Sandbox.UI.GameMenu;
@inherits Panel
@attribute [StyleSheet]
@namespace Facepunch.Pool.Menu

<root class="layout">

    <div class="game-title">
        &#x1F3B1; @Game.Menu.Package.Title
    </div>
    
    @if ( Lobbies == null || Lobbies.Length == 0 )
    {
        <div class="game-description">
            There are no lobbies right now, but you can start your own!
        </div>
    }
    else
    {
        <div class="lobby-list scroll">
            @foreach ( var lobby in Lobbies )
            {
                if ( lobby.MemberCount == 1 && lobby.State == "open" )
                {
                    <div class="lobby-button" onclick=@( () => JoinLobby( lobby ) )>
                        <img class="lobby-member" src="avatar:@lobby.Id" tooltip="@lobby.Owner.Name"/>
                        <label>@lobby.Title</label>
                    </div>  
                }
            }
        </div> 
    }
    
    <div class="controls">

        <div class="button" onclick=@CreateLobbyAsync>
            Create
            <div class="underline"></div>
        </div>
        
        <a class="button" href="/">
            Go Back
            <div class="underline"></div>
        </a>

    </div> 

</root>

@code
{
    private RealTimeUntil NextLobbyRefresh { get; set; }
    private ILobby[] Lobbies { get; set; }

    public override void Tick()
    {
        if ( NextLobbyRefresh )
        {
            NextLobbyRefresh = 4f;
            RefreshLobbies();
        }
        
        base.Tick();
    }

    private async void CreateLobbyAsync()
    {
        var maxMembers = Game.Menu.Package.GetMeta( "MaxPlayers", 2 );
        await Game.Menu.CreateLobbyAsync( maxMembers, "game", true );

        var me = new Friend( Game.SteamId );
        Game.Menu.Lobby.Title = $"{me.Name}'s Lobby";
        Game.Menu.Lobby.Map = GameMenu.DefaultMap;
        
        GameMenu.Lobby = Game.Menu.Lobby;
        this.Navigate( "/lobby/active" );
    }

    private async void JoinLobby( ILobby lobby )
    {
        if ( lobby == null ) return;
        
        GameMenu.Lobby?.Leave();
        GameMenu.Lobby = null;

        var success = await lobby.JoinAsync();

        if ( success )
        {
            GameMenu.Lobby = lobby;
            this.Navigate( "/lobby/active" );
        }
        else
        {
            RefreshLobbies();
        }
    }

    private async void RefreshLobbies()
    {
        Lobbies = await Game.Menu.QueryLobbiesAsync( null, 1 );
        StateHasChanged();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( RealTime.Delta );
    }
}
